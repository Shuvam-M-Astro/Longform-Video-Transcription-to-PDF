# Horizontal Pod Autoscaler configurations for automatic scaling

# HPA for web application
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: video-processing-web-hpa
  namespace: video-processing
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: video-processing-web
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
# HPA for Celery workers
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: video-processing-worker-hpa
  namespace: video-processing
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: video-processing-worker
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 20
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 3
        periodSeconds: 60
      selectPolicy: Max
---
# Custom HPA for queue-based scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: video-processing-worker-queue-hpa
  namespace: video-processing
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: video-processing-worker
  minReplicas: 3
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: celery_queue_length
      target:
        type: AverageValue
        averageValue: "5"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 5
        periodSeconds: 60
      selectPolicy: Max
---
# Vertical Pod Autoscaler for resource optimization
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: video-processing-web-vpa
  namespace: video-processing
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: video-processing-web
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: web
      minAllowed:
        cpu: 250m
        memory: 512Mi
      maxAllowed:
        cpu: 2000m
        memory: 4Gi
---
# VPA for Celery workers
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: video-processing-worker-vpa
  namespace: video-processing
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: video-processing-worker
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: worker
      minAllowed:
        cpu: 500m
        memory: 1Gi
      maxAllowed:
        cpu: 4000m
        memory: 8Gi
---
# Pod Disruption Budget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: video-processing-web-pdb
  namespace: video-processing
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: video-processing-web
---
# PDB for Celery workers
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: video-processing-worker-pdb
  namespace: video-processing
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: video-processing-worker
---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: video-processing-netpol
  namespace: video-processing
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: video-processing
    - podSelector:
        matchLabels:
          app: video-processing-web
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: video-processing
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
---
# Service Monitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: video-processing-monitor
  namespace: video-processing
spec:
  selector:
    matchLabels:
      app: video-processing-web
  endpoints:
  - port: 5000
    path: /metrics
    interval: 30s
---
# PrometheusRule for alerting
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: video-processing-alerts
  namespace: video-processing
spec:
  groups:
  - name: video-processing
    rules:
    - alert: HighCPUUsage
      expr: rate(container_cpu_usage_seconds_total{namespace="video-processing"}[5m]) > 0.8
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "High CPU usage detected"
        description: "CPU usage is above 80% for 5 minutes"
    - alert: HighMemoryUsage
      expr: container_memory_usage_bytes{namespace="video-processing"} / container_spec_memory_limit_bytes > 0.9
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "High memory usage detected"
        description: "Memory usage is above 90% for 5 minutes"
    - alert: QueueBacklog
      expr: video_processing_queue_size > 100
      for: 2m
      labels:
        severity: critical
      annotations:
        summary: "Queue backlog detected"
        description: "Processing queue has more than 100 pending tasks"
    - alert: FailedJobs
      expr: rate(video_processing_jobs_total{status="failed"}[5m]) > 0.1
      for: 2m
      labels:
        severity: critical
      annotations:
        summary: "High job failure rate"
        description: "Job failure rate is above 10% for 2 minutes"
